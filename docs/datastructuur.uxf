<diagram program="umletino" version="14.4.0-SNAPSHOT"><zoom_level>10</zoom_level><element><id>UMLClass</id><coordinates><x>0</x><y>78</y><w>300</w><h>420</h></coordinates><panel_attributes>random.py
--
init
- board size
- car objects (list)
- board
- moves (list)
- movable cars (dict)
- count failed moves (int)
- save used boards (list)
- random car
- temporarily save coordinates
       
--
check_board
- use new car coordinates to try a new board
- if not a new board, set back previous
- if 10 times no new board possible, allow steps back

--
check_move
- take random empty space
- find cars to move to that space

--
move
- move red car if possible
- else pick random car
- change cars coordinates to new location</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>340</x><y>78</y><w>270</w><h>660</h></coordinates><panel_attributes>breadth_first.py
--
init
- board size
- car objects (list) 
- board
- first board
- temp board
- all moves (list)
- all moves (dict)
- empty spaces (list)
- movable cars (dict)
- parent board
- queue (list)
--
find_spaces
- set the first board or set back parent board
- fill list of empty spaces

--
check_move
- loop over empty space, find moveable cars
- add movable cars to list 

--
move
- loop over movable cars
- make new board by moving a car
- if new board: append it to queue and record move

--
next_child
- set board to next board from queue

--
won 
- check if red car is on winning coordinates

--
traceback
- when won, make a list of boards that made the win possible
</panel_attributes><additional_attributes></additional_attributes></element></diagram>